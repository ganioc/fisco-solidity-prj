package org.com.fisco;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple8;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class PPay extends Contract {
    public static final String[] BINARY_ARRAY = {"","0000000281526004018080602001828103825260118152602001807f7061726b696e675f7265636f72645f6964000000000000000000000000000000815250602001915050600060405180830381600087803b158015610c5a57600080fd5b505af1158015610c6e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015610c9857600080fd5b810190808051640100000000811115610cb057600080fd5b82810190506020810184811115610cc657600080fd5b8151856001820283011164010000000082111715610ce357600080fd5b50509291905050508573ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600a8152602001807f7072657061795f6c656e00000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015610d8b57600080fd5b505af1158015610d9f573d6000803e3d6000fd5b505050506040513d6020811015610db557600080fd5b81019080805190602001909291905050508673ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260118152602001807f73686f756c645f7061795f616d6f756e74000000000000000000000000000000815250602001915050602060405180830381600087803b158015610e6657600080fd5b505af1158015610e7a573d6000803e3d6000fd5b505050506040513d6020811015610e9057600080fd5b81019080805190602001909291905050508773ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260088152602001807f7a65726f5f6f7765000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015610f4157600080fd5b505af1158015610f55573d6000803e3d6000fd5b505050506040513d6020811015610f6b57600080fd5b8101908080519060200190929190505050995099509950995099509950995099505b5050919395975091939597565b60008054905090565b606060028054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561103b5780601f106110105761010080835404028352916020019161103b565b820191906000526020600020905b81548152906001019060200180831161101e57829003601f168201915b5050505050905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806110e76040805190810160405280600781526020017f706f735f706179000000000000000000000000000000000000000000000000008152506040805190810160405280600881526020017f62657274685f69640000000000000000000000000000000000000000000000008152508c611ea5565b905060008173ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561114f57600080fd5b505af1158015611163573d6000803e3d6000fd5b505050506040513d602081101561117957600080fd5b810190808051906020019092919050505014151561119a57600491506111ad565b6111aa8a8a8a8a8a8a8a8a61221b565b91505b5098975050505050505050565b60606000806000606060008060008060006112406040805190810160405280600781526020017f706f735f706179000000000000000000000000000000000000000000000000008152506040805190810160405280600881526020017f62657274685f69640000000000000000000000000000000000000000000000008152508d611ea5565b915060008273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156112a857600080fd5b505af11580156112bc573d6000803e3d6000fd5b505050506040513d60208110156112d257600080fd5b8101908080519060200190929190505050141515611345576000806000806000806020604051908101604052806000815250959493929190859550849450839350602060405190810160405280600081525092919082925081915080905099509950995099509950995099509950611b87565b8173ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1580156113b557600080fd5b505af11580156113c9573d6000803e3d6000fd5b505050506040513d60208110156113df57600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260088152602001807f62657274685f6964000000000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b15801561149257600080fd5b505af11580156114a6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156114d057600080fd5b8101908080516401000000008111156114e857600080fd5b828101905060208101848111156114fe57600080fd5b815185600182028301116401000000008211171561151b57600080fd5b50509291905050508173ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260068152602001807f616d6f756e740000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b1580156115c357600080fd5b505af11580156115d7573d6000803e3d6000fd5b505050506040513d60208110156115ed57600080fd5b81019080805190602001909291905050508273ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260048152602001807f6d6f646500000000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561169e57600080fd5b505af11580156116b2573d6000803e3d6000fd5b505050506040513d60208110156116c857600080fd5b81019080805190602001909291905050508373ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260188152602001807f7061726b696e675f61637475616c5f7061795f6d6f6e65790000000000000000815250602001915050602060405180830381600087803b15801561177957600080fd5b505af115801561178d573d6000803e3d6000fd5b505050506040513d60208110156117a357600080fd5b81019080805190602001909291905050508473ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260118152602001807f7061726b696e675f7265636f72645f6964000000000000000000000000000000815250602001915050600060405180830381600087803b15801561185457600080fd5b505af1158015611868573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561189257600080fd5b8101908080516401000000008111156118aa57600080fd5b828101905060208101848111156118c057600080fd5b81518560018202830111640100000000821117156118dd57600080fd5b50509291905050508573ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600a8152602001807f7072657061795f6c656e00000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561198557600080fd5b505af1158015611999573d6000803e3d6000fd5b505050506040513d60208110156119af57600080fd5b81019080805190602001909291905050508673ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260118152602001807f73686f756c645f7061795f616d6f756e74000000000000000000000000000000815250602001915050602060405180830381600087803b158015611a6057600080fd5b505af1158015611a74573d6000803e3d6000fd5b505050506040513d6020811015611a8a57600080fd5b81019080805190602001909291905050508773ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260088152602001807f7a65726f5f6f7765000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015611b3b57600080fd5b505af1158015611b4f573d6000803e3d6000fd5b505050506040513d6020811015611b6557600080fd5b8101908080519060200190929190505050995099509950995099509950995099505b5050919395975091939597565b6000806000611ba286612c1a565b91508173ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038160008780","","2c075760009250612c0c565b600192505b505098975050505050505050565b6000612c24612d4c565b73ffffffffffffffffffffffffffffffffffffffff1663f23f63c9836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612cab578082015181840152602081019050612c90565b50505050905090810190601f168015612cd85780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b158015612cf757600080fd5b505af1158015612d0b573d6000803e3d6000fd5b505050506040513d6020811015612d2157600080fd5b81019080805190602001909291905050509050919050565b6000808154809291906001019190505550565b60006110019050905600a165627a7a723058208be66ec7c573e24a66abd6d5feb1456bd79ca5865f8481d7a4b4bf678cb0395a0029"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040523480156200001157600080fd5b506040516200318638038062003186833981018060405281019080805182019291905050508033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000808190555080600290805190602001906200009792919062000345565b5050620000b381620000ba640100000000026401000000009004565b50620003f4565b620000d36200033b640100000000026401000000009004565b73ffffffffffffffffffffffffffffffffffffffff1663c92a78016040805190810160405280600781526020017f706f735f70617900000000000000000000000000000000000000000000000000815250836040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018060200180602001848103845286818151815260200191508051906020019080838360005b838110156200019a5780820151818401526020810190506200017d565b50505050905090810190601f168015620001c85780820380516001836020036101000a031916815260200191505b50848103835285818151815260200191508051906020019080838360005b8381101562000203578082015181840152602081019050620001e6565b50505050905090810190601f168015620002315780820380516001836020036101000a031916815260200191505b508481038252606b8152602001807f62657274685f69642c696e6465782c616d6f756e742c6d6f64652c7061726b6981526020017f6e675f61637475616c5f7061795f6d6f6e65792c7061726b696e675f7265636f81526020017f72645f69642c7072657061795f6c656e2c73686f756c645f7061795f616d6f7581526020017f6e742c7a65726f5f6f776500000000000000000000000000000000000000000081525060800195505050505050602060405180830381600087803b158015620002fa57600080fd5b505af11580156200030f573d6000803e3d6000fd5b505050506040513d60208110156200032657600080fd5b81019080805190602001909291905050505050565b6000611001905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200038857805160ff1916838001178555620003b9565b82800160010185558215620003b9579182015b82811115620003b85782518255916020019190600101906200039b565b5b509050620003c89190620003cc565b5090565b620003f191905b80821115620003ed576000816000905550600101620003d3565b5090565b90565b612d8280620004046000396000f300608060405260043610610078576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063325ff7241461007d5780636e9d1e7c146101f557806375bfac02146103025780637f612ece1461032d578063c624d53414610469578063d4c46ced146104c0575b600080fd5b34801561008957600080fd5b506100e4600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610550565b60405180806020018981526020018881526020018781526020018060200186815260200185815260200184815260200183810383528b818151815260200191508051906020019080838360005b8381101561014c578082015181840152602081019050610131565b50505050905090810190601f1680156101795780820380516001836020036101000a031916815260200191505b50838103825287818151815260200191508051906020019080838360005b838110156101b2578082015181840152602081019050610197565b50505050905090810190601f1680156101df5780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b34801561020157600080fd5b506102de600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001909291908035906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001909291908035906020019092919080359060200190929190505050610f2a565b604051808260048111156102ee57fe5b60ff16815260200191505060405180910390f35b34801561030e57600080fd5b50610317611075565b6040518082815260200191505060405180910390f35b34801561033957600080fd5b506103586004803603810190808035906020019092919050505061107e565b60405180806020018981526020018881526020018781526020018060200186815260200185815260200184815260200183810383528b818151815260200191508051906020019080838360005b838110156103c05780820151818401526020810190506103a5565b50505050905090810190601f1680156103ed5780820380516001836020036101000a031916815260200191505b50838103825287818151815260200191508051906020019080838360005b8381101561042657808201518184015260208101905061040b565b50505050905090810190601f1680156104535780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b34801561047557600080fd5b5061047e611ac8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104cc57600080fd5b506104d5611af2565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105155780820151818401526020810190506104fa565b50505050905090810190601f1680156105425780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60606000806000606060008060008060006105d66040805190810160405280600781526020017f706f735f706179000000000000000000000000000000000000000000000000008152506040805190810160405280600881526020017f62657274685f69640000000000000000000000000000000000000000000000008152508d611b94565b915060008273ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561063e57600080fd5b505af1158015610652573d6000803e3d6000fd5b505050506040513d602081101561066857600080fd5b81019080805190602001909291905050501415156106db576000806000806000806020604051908101604052806000815250959493929190859550849450839350602060405190810160405280600081525092919082925081915080905099509950995099509950995099509950610f1d565b8173ffffffffffffffffffffffffffffffffffffffff16633dd2b61460006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561074b57600080fd5b505af115801561075f573d6000803e3d6000fd5b505050506040513d602081101561077557600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260088152602001807f62657274685f6964000000000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b15801561082857600080fd5b505af115801561083c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561086657600080fd5b81019080805164010000000081111561087e57600080fd5b8281019050602081018481111561089457600080fd5b81518560018202830111640100000000821117156108b157600080fd5b50509291905050508173ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260068152602001807f616d6f756e740000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561095957600080fd5b505af115801561096d573d6000803e3d6000fd5b505050506040513d602081101561098357600080fd5b81019080805190602001909291905050508273ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260048152602001807f6d6f646500000000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015610a3457600080fd5b505af1158015610a48573d6000803e3d6000fd5b505050506040513d6020811015610a5e57600080fd5b81019080805190602001909291905050508373ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260188152602001807f7061726b696e675f61637475616c5f7061795f6d6f6e65790000000000000000815250602001915050602060405180830381600087803b158015610b0f57600080fd5b505af1158015610b23573d6000803e3d6000fd5b505050506040513d6020811015610b3957600080fd5b81019080805190602001909291905050508473ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260118152602001807f7061726b696e675f7265636f72645f6964000000000000000000000000000000815250602001915050600060405180830381600087803b158015610bea57600080fd5b505af1158015610bfe573d6000803e3d60","","3b158015611c0857600080fd5b505af1158015611c1c573d6000803e3d6000fd5b505050506040513d6020811015611c3257600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663ae763db586866040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835285818151815260200191508051906020019080838360005b83811015611cd2578082015181840152602081019050611cb7565b50505050905090810190601f168015611cff5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015611d38578082015181840152602081019050611d1d565b50505050905090810190601f168015611d655780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015611d8657600080fd5b505af1158015611d9a573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663d8ac59576002836040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015611ea35780601f10611e7857610100808354040283529160200191611ea3565b820191906000526020600020905b815481529060010190602001808311611e8657829003601f168201915b50509350505050602060405180830381600087803b158015611ec457600080fd5b505af1158015611ed8573d6000803e3d6000fd5b505050506040513d6020811015611eee57600080fd5b8101908080519060200190929190505050925050509392505050565b6000806000611f4d6040805190810160405280600781526020017f706f735f70617900000000000000000000000000000000000000000000000000815250612c1a565b91508173ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611fb357600080fd5b505af1158015611fc7573d6000803e3d6000fd5b505050506040513d6020811015611fdd57600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff16631a391cb48c6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260088152602001807f62657274685f6964000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156120b0578082015181840152602081019050612095565b50505050905090810190601f1680156120dd5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156120fd57600080fd5b505af1158015612111573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663f2f4ee6d6000546040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260058152602001807f696e64657800000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b1580156121bf57600080fd5b505af11580156121d3573d6000803e3d6000fd5b505050506121df612d39565b8073ffffffffffffffffffffffffffffffffffffffff1663def426988b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260068152602001807f616d6f756e74000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b15801561228757600080fd5b505af115801561229b573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663def426988a6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260048152602001807f6d6f64650000000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b15801561234757600080fd5b505af115801561235b573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663def42698896040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260188152602001807f7061726b696e675f61637475616c5f7061795f6d6f6e6579000000000000000081525060200192505050600060405180830381600087803b15801561240757600080fd5b505af115801561241b573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16631a391cb4886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260118152602001807f7061726b696e675f7265636f72645f6964000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156124df5780820151818401526020810190506124c4565b50505050905090810190601f16801561250c5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561252c57600080fd5b505af1158015612540573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663def42698876040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018381526020018281038252600a8152602001807f7072657061795f6c656e0000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b1580156125ec57600080fd5b505af1158015612600573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663def42698866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260118152602001807f73686f756c645f7061795f616d6f756e7400000000000000000000000000000081525060200192505050600060405180830381600087803b1580156126ac57600080fd5b505af11580156126c0573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663def42698856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260088152602001807f7a65726f5f6f776500000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b15801561276c57600080fd5b505af1158015612780573d6000803e3d6000fd5b5050505060018273ffffffffffffffffffffffffffffffffffffffff16634c6f30c06002846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182810382528481815460018160011615610100020316600290048152602001915080546001816001161561010002031660029004801561288b5780601f106128605761010080835404028352916020019161288b565b820191906000526020600020905b81548152906001019060200180831161286e57829003601f168201915b50509350505050602060405180830381600087803b1580156128ac57600080fd5b505af11580156128c0573d6000803e3d6000fd5b505050506040513d60208110156128d657600080fd5b810190808051906020019092919050505014156128f657600092506128fb565b600192505b505098975050505050505050565b600080600061291786612c1a565b91508173ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561297d57600080fd5b505af1158015612991573d6000803e3d6000fd5b505050506040513d60208110156129a757600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663d62b54b486866040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825284818151815260200191508051906020019080838360005b83811015612a49578082015181840152602081019050612a2e565b50505050905090810190601f168015612a765780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015612a9657600080fd5b505af1158015612aaa573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663d8ac59576002836040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015612bb35780601f10612b8857610100808354040283529160200191612bb3565b820191906000526020600020905b815481529060010190602001808311612b9657829003601f168201915b50509350505050602060405180830381600087803b158015612bd457600080fd5b505af1158015612be8573d6000803e3d6000fd5b505050506040513d6020811015612bfe576000","80fd5b8101908080519060200190929190505050925050509392505050565b6000612c24612d4c565b73ffffffffffffffffffffffffffffffffffffffff166359a48b65836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612cab578082015181840152602081019050612c90565b50505050905090810190601f168015612cd85780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b158015612cf757600080fd5b505af1158015612d0b573d6000803e3d6000fd5b505050506040513d6020811015612d2157600080fd5b81019080805190602001909291905050509050919050565b6000808154809291906001019190505550565b60006110019050905600a165627a7a723058201b75e2fc46d88674708d02b459f297852ca085a3d37a91e8ae75394be00c159e0029"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"mIndex\",\"type\":\"int256\"}],\"name\":\"getByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLoc\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"berthId\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"int256\"},{\"name\":\"mode\",\"type\":\"int256\"},{\"name\":\"parkingActualPayMoney\",\"type\":\"int256\"},{\"name\":\"parkingRecordId\",\"type\":\"string\"},{\"name\":\"prepayLen\",\"type\":\"int256\"},{\"name\":\"shouldPayAmount\",\"type\":\"int256\"},{\"name\":\"zeroOwe\",\"type\":\"int256\"}],\"name\":\"insertRecord\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"berthId\",\"type\":\"string\"}],\"name\":\"getById\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"loc\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final String FUNC_GETBYINDEX = "getByIndex";

    public static final String FUNC_GETINEX = "getInex";

    public static final String FUNC_GETLOC = "getLoc";

    public static final String FUNC_GETOWNER = "getOwner";

    public static final String FUNC_INSERTRECORD = "insertRecord";

    public static final String FUNC_GETBYID = "getById";

    protected PPay(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt getByIndex(BigInteger mIndex) {
        final Function function = new Function(
                FUNC_GETBYINDEX, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(mIndex)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getByIndex(BigInteger mIndex, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETBYINDEX, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(mIndex)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetByIndex(BigInteger mIndex) {
        final Function function = new Function(
                FUNC_GETBYINDEX, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(mIndex)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getGetByIndexInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETBYINDEX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple8<String, BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger> getGetByIndexOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETBYINDEX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple8<String, BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue()
                );
    }

    public BigInteger getInex() throws ContractException {
        final Function function = new Function(FUNC_GETINEX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String getLoc() throws ContractException {
        final Function function = new Function(FUNC_GETLOC, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String getOwner() throws ContractException {
        final Function function = new Function(FUNC_GETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt insertRecord(String berthId, BigInteger amount, BigInteger mode, BigInteger parkingActualPayMoney, String parkingRecordId, BigInteger prepayLen, BigInteger shouldPayAmount, BigInteger zeroOwe) {
        final Function function = new Function(
                FUNC_INSERTRECORD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(berthId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(amount), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(mode), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(parkingActualPayMoney), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(parkingRecordId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(prepayLen), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(shouldPayAmount), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(zeroOwe)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void insertRecord(String berthId, BigInteger amount, BigInteger mode, BigInteger parkingActualPayMoney, String parkingRecordId, BigInteger prepayLen, BigInteger shouldPayAmount, BigInteger zeroOwe, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INSERTRECORD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(berthId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(amount), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(mode), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(parkingActualPayMoney), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(parkingRecordId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(prepayLen), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(shouldPayAmount), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(zeroOwe)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInsertRecord(String berthId, BigInteger amount, BigInteger mode, BigInteger parkingActualPayMoney, String parkingRecordId, BigInteger prepayLen, BigInteger shouldPayAmount, BigInteger zeroOwe) {
        final Function function = new Function(
                FUNC_INSERTRECORD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(berthId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(amount), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(mode), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(parkingActualPayMoney), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(parkingRecordId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(prepayLen), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(shouldPayAmount), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(zeroOwe)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple8<String, BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger> getInsertRecordInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSERTRECORD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple8<String, BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue()
                );
    }

    public Tuple1<BigInteger> getInsertRecordOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INSERTRECORD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt getById(String berthId) {
        final Function function = new Function(
                FUNC_GETBYID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(berthId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getById(String berthId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETBYID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(berthId)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetById(String berthId) {
        final Function function = new Function(
                FUNC_GETBYID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(berthId)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getGetByIdInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETBYID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple8<String, BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger> getGetByIdOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETBYID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple8<String, BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue()
                );
    }

    public static PPay load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new PPay(contractAddress, client, credential);
    }

    public static PPay deploy(Client client, CryptoKeyPair credential, String loc) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(loc)));
        return deploy(PPay.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }
}
