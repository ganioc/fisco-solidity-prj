package org.com.fisco;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple9;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class TstInV4 extends Contract {
    public static final String[] BINARY_ARRAY = {"","00000000000000000000000000000000028152600401610a64906134a3565b602060405180830381600087803b158015610a7e57600080fd5b505af1158015610a92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ab69190810190612b68565b8673ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610b0990613455565b602060405180830381600087803b158015610b2357600080fd5b505af1158015610b37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b5b9190810190612b68565b8773ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610bae90613407565b602060405180830381600087803b158015610bc857600080fd5b505af1158015610bdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610c009190810190612b68565b8873ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610c539061363e565b600060405180830381600087803b158015610c6d57600080fd5b505af1158015610c81573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610caa9190810190612c35565b9a509a509a509a509a509a509a509a509a505b50509193959799909294969850565b60008054905090565b606060028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d6d5780601f10610d4257610100808354040283529160200191610d6d565b820191906000526020600020905b815481529060010190602001808311610d5057829003601f168201915b5050505050905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606000806060600080610e8860038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e445780601f10610e1957610100808354040283529160200191610e44565b820191906000526020600020905b815481529060010190602001808311610e2757829003601f168201915b50505050508b8b6040805190810160405280600781526020017f696e5f74696d65000000000000000000000000000000000000000000000000008152508c8c6125b3565b94508473ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610eee57600080fd5b505af1158015610f02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f269190810190612b68565b935083604051908082528060200260200182016040528015610f5c57816020015b6060815260200190600190039081610f475790505b509250600091505b838210156110e7578473ffffffffffffffffffffffffffffffffffffffff1663846719e0836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610fc1919061322b565b602060405180830381600087803b158015610fdb57600080fd5b505af1158015610fef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110139190810190612b16565b90508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161106890613693565b600060405180830381600087803b15801561108257600080fd5b505af1158015611096573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506110bf9190810190612c35565b83838151811015156110cd57fe5b906020019060200201819052508180600101925050610f64565b8295505050505050949350505050565b606060008060006060600080600060606000806111ae60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111a35780601f10611178576101008083540402835291602001916111a3565b820191906000526020600020905b81548152906001019060200180831161118657829003601f168201915b50505050508d61196a565b915060008273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561121657600080fd5b505af115801561122a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061124e9190810190612b68565b14156112c2576000806000806000806020604051908101604052806000815250959493929190859550849450839350602060405190810160405280600081525092919082925081915080905060206040519081016040528060008152509a509a509a509a509a509a509a509a509a5061195b565b8173ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016113189190613298565b602060405180830381600087803b15801561133257600080fd5b505af1158015611346573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061136a9190810190612b16565b90508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016113bf90613693565b600060405180830381600087803b1580156113d957600080fd5b505af11580156113ed573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506114169190810190612c35565b8173ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114699061371d565b602060405180830381600087803b15801561148357600080fd5b505af1158015611497573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114bb9190810190612b68565b8273ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161150e906135f0565b602060405180830381600087803b15801561152857600080fd5b505af115801561153c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115609190810190612b68565b8373ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016115b39061354d565b602060405180830381600087803b1580156115cd57600080fd5b505af11580156115e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116059190810190612b68565b8473ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016116589061359b565b600060405180830381600087803b15801561167257600080fd5b505af1158015611686573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506116af9190810190612c35565b8573ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611702906134a3565b602060405180830381600087803b15801561171c57600080fd5b505af1158015611730573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506117549190810190612b68565b8673ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016117a790613455565b602060405180830381600087803b1580156117c157600080fd5b505af11580156117d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506117f99190810190612b68565b8773ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161184c90613407565b602060405180830381600087803b15801561186657600080fd5b505af115801561187a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061189e9190810190612b68565b8873ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016118f19061363e565b600060405180830381600087803b15801561190b57600080fd5b505af115801561191f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506119489190810190612c35565b9a509a509a509a509a509a509a509a509a505b50509193959799909294969850565b6000806000611978856128b8565b91508173ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156119de57600080fd5b505af11580156119f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611a169190810190612ac4565b90508073ffffffffffffffffffffffffffffffffffffffff1663cd30a1d1856040518263ffffffff167c0100000000","000000000000000000000000000000000000000000000000028152600401611a6d91906136b3565b600060405180830381600087803b158015611a8757600080fd5b505af1158015611a9b573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e8434e3986836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611af69291906132d5565b602060405180830381600087803b158015611b1057600080fd5b505af1158015611b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b489190810190612aed565b9250505092915050565b6000806000611bfa60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611bf05780601f10611bc557610100808354040283529160200191611bf0565b820191906000526020600020905b815481529060010190602001808311611bd357829003601f168201915b50505050506128b8565b91508173ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611c6057600080fd5b505af1158015611c74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611c989190810190612b16565b90508073ffffffffffffffffffffffffffffffffffffffff1663e942b51660036040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611cf091906136e8565b600060405180830381600087803b158015611d0a57600080fd5b505af1158015611d1e573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663e942b5168d6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611d7791906136b3565b600060405180830381600087803b158015611d9157600080fd5b505af1158015611da5573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe96000546040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611e00919061351f565b600060405180830381600087803b158015611e1a57600080fd5b505af1158015611e2e573d6000803e3d6000fd5b50505050611e3a61296f565b8073ffffffffffffffffffffffffffffffffffffffff16632ef8ba748c6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611e8f919061373d565b600060405180830381600087803b158015611ea957600080fd5b505af1158015611ebd573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632ef8ba748b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611f169190613610565b600060405180830381600087803b158015611f3057600080fd5b505af1158015611f44573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632ef8ba748a6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611f9d919061356d565b600060405180830381600087803b158015611fb757600080fd5b505af1158015611fcb573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663e942b516896040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161202491906135bb565b600060405180830381600087803b15801561203e57600080fd5b505af1158015612052573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632ef8ba74886040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016120ab91906134c3565b600060405180830381600087803b1580156120c557600080fd5b505af11580156120d9573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632ef8ba74876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016121329190613475565b600060405180830381600087803b15801561214c57600080fd5b505af1158015612160573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632ef8ba74866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016121b99190613427565b600060405180830381600087803b1580156121d357600080fd5b505af11580156121e7573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663e942b516856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612240919061365e565b600060405180830381600087803b15801561225a57600080fd5b505af115801561226e573d6000803e3d6000fd5b5050505060018273ffffffffffffffffffffffffffffffffffffffff166331afac366003846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016122cc9291906133d7565b602060405180830381600087803b1580156122e657600080fd5b505af11580156122fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061231e9190810190612b68565b1415612372577f3a66b6d5d90e100fca6d190a0e685c087e9c8e3981966428c8cf5b9512ebd9b86000600481111561235257fe5b33604051612361929190613246565b60405180910390a1600092506123bc565b7f3a66b6d5d90e100fca6d190a0e685c087e9c8e3981966428c8cf5b9512ebd9b8600160048111156123a057fe5b336040516123af929190613246565b60405180910390a1600192505b50509998505050505050505050565b60008060006123d9856128b8565b91508173ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561243f57600080fd5b505af1158015612453573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506124779190810190612ac4565b90508073ffffffffffffffffffffffffffffffffffffffff1663e44594b9856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016124ce91906134f1565b600060405180830381600087803b1580156124e857600080fd5b505af11580156124fc573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e8434e3986836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016125579291906132d5565b602060405180830381600087803b15801561257157600080fd5b505af1158015612585573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506125a99190810190612aed565b9250505092915050565b6000806000806125c28a6128b8565b92508273ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561262857600080fd5b505af115801561263c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506126609190810190612ac4565b91508173ffffffffffffffffffffffffffffffffffffffff166342f8dd3188886040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016126b9929190613305565b600060405180830381600087803b1580156126d357600080fd5b505af11580156126e7573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663c31c9b6588876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612742929190613305565b600060405180830381600087803b15801561275c57600080fd5b505af1158015612770573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16637ec1cc658a8a6040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016127cb92919061326f565b600060405180830381600087803b1580156127e557600080fd5b505af11580156127f9573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663e8434e398b846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016128549291906132d5565b602060405180830381600087803b15801561286e57600080fd5b505af1158015612882573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506128a69190810190612aed565b90508093505050509695505050505050565b60006128c2612982565b73ffffffffffffffffffffffffffffffffffffffff1663f23f63c9836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161291691906132b3565b602060405180830381600087803b15801561293057600080fd5b505af1158015612944573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506129689190810190612b3f565b9050919050565b6000808154809291906001019190505550565b6000611001905090565b60006129988251613876565b905092915050565b60006129ac8251613888565b905092915050565b60006129c0825161389a565b905092915050565b60006129d482516138ac565b905092915050565b60006129e882356138be565b905092915050565b60006129fc82516138be565b905092915050565b600082601f8301121515612a1757600080fd5b8135612a2a612a25826137b3565b613786565b91508082526020830160208301858383011115612a4657600080fd","5b612a5183828461391a565b50505092915050565b600082601f8301121515612a6d57600080fd5b8151612a80612a7b826137b3565b613786565b91508082526020830160208301858383011115612a9c57600080fd5b612aa7838284613929565b50505092915050565b6000612abc82356138c8565b905092915050565b600060208284031215612ad657600080fd5b6000612ae48482850161298c565b91505092915050565b600060208284031215612aff57600080fd5b6000612b0d848285016129a0565b91505092915050565b600060208284031215612b2857600080fd5b6000612b36848285016129b4565b91505092915050565b600060208284031215612b5157600080fd5b6000612b5f848285016129c8565b91505092915050565b600060208284031215612b7a57600080fd5b6000612b88848285016129f0565b91505092915050565b60008060008060808587031215612ba757600080fd5b6000612bb5878288016129dc565b9450506020612bc6878288016129dc565b9350506040612bd7878288016129dc565b9250506060612be8878288016129dc565b91505092959194509250565b600060208284031215612c0657600080fd5b600082013567ffffffffffffffff811115612c2057600080fd5b612c2c84828501612a04565b91505092915050565b600060208284031215612c4757600080fd5b600082015167ffffffffffffffff811115612c6157600080fd5b612c6d84828501612a5a565b91505092915050565b60008060008060008060008060006101208a8c031215612c9557600080fd5b60008a013567ffffffffffffffff811115612caf57600080fd5b612cbb8c828d01612a04565b9950506020612ccc8c828d016129dc565b9850506040612cdd8c828d016129dc565b9750506060612cee8c828d016129dc565b96505060808a013567ffffffffffffffff811115612d0b57600080fd5b612d178c828d01612a04565b95505060a0612d288c828d016129dc565b94505060c0612d398c828d016129dc565b93505060e0612d4a8c828d016129dc565b9250506101008a013567ffffffffffffffff811115612d6857600080fd5b612d748c828d01612a04565b9150509295985092959850929598565b600060208284031215612d9657600080fd5b6000612da484828501612ab0565b91505092915050565b612db68161382c565b82525050565b6000612dc7826137fe565b80845260208401935083602082028501612de0856137df565b60005b84811015612e19578383038852612dfb838351612eab565b9250612e068261381f565b9150602088019750600181019050612de3565b508196508694505050505092915050565b612e33816138d2565b82525050565b612e42816138e4565b82525050565b612e51816138f6565b82525050565b612e6081613862565b82525050565b612e6f81613908565b82525050565b6000612e8082613814565b808452612e94816020860160208601613929565b612e9d8161395c565b602085010191505092915050565b6000612eb682613809565b808452612eca816020860160208601613929565b612ed38161395c565b602085010191505092915050565b600081546001811660008114612efe5760018114612f1e57612f5f565b607f600283041680865260ff198316602087015260408601935050612f5f565b60028204808652602086019550612f34856137ec565b60005b82811015612f5657815481890152600182019150602081019050612f37565b80880195505050505b505092915050565b6000600c82527f76656869636c655f7479706500000000000000000000000000000000000000006020830152604082019050919050565b6000600c82527f7072657061795f6d6f6e657900000000000000000000000000000000000000006020830152604082019050919050565b6000600a82527f7072657061795f6c656e000000000000000000000000000000000000000000006020830152604082019050919050565b6000600582527f696e6465780000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600782527f696e5f74797065000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600882527f706c6174655f69640000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600c82527f696e5f74696d655f7479706500000000000000000000000000000000000000006020830152604082019050919050565b6000600b82527f696e5f7069635f686173680000000000000000000000000000000000000000006020830152604082019050919050565b6000600882527f62657274685f69640000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600882527f7461626c655f69640000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600782527f696e5f74696d65000000000000000000000000000000000000000000000000006020830152604082019050919050565b6131cd8161386c565b82525050565b60006020820190506131e86000830184612dad565b92915050565b600060208201905081810360008301526132088184612dbc565b905092915050565b60006020820190506132256000830184612e48565b92915050565b60006020820190506132406000830184612e57565b92915050565b600060408201905061325b6000830185612e57565b6132686020830184612dad565b9392505050565b60006040820190506132846000830185612e57565b6132916020830184612e57565b9392505050565b60006020820190506132ad6000830184612e66565b92915050565b600060208201905081810360008301526132cd8184612e75565b905092915050565b600060408201905081810360008301526132ef8185612e75565b90506132fe6020830184612e2a565b9392505050565b6000604082019050818103600083015261331f8185612e75565b905061332e6020830184612e57565b9392505050565b6000610120820190508181036000830152613350818c612e75565b905061335f602083018b612e57565b61336c604083018a612e57565b6133796060830189612e57565b818103608083015261338b8188612e75565b905061339a60a0830187612e57565b6133a760c0830186612e57565b6133b460e0830185612e57565b8181036101008301526133c78184612e75565b90509a9950505050505050505050565b600060408201905081810360008301526133f18185612ee1565b90506134006020830184612e39565b9392505050565b6000602082019050818103600083015261342081612f67565b9050919050565b6000604082019050818103600083015261344081612f67565b905061344f6020830184612e57565b92915050565b6000602082019050818103600083015261346e81612f9e565b9050919050565b6000604082019050818103600083015261348e81612f9e565b905061349d6020830184612e57565b92915050565b600060208201905081810360008301526134bc81612fd5565b9050919050565b600060408201905081810360008301526134dc81612fd5565b90506134eb6020830184612e57565b92915050565b6000604082019050818103600083015261350a8161300c565b90506135196020830184612e57565b92915050565b600060408201905081810360008301526135388161300c565b905061354760208301846131c4565b92915050565b6000602082019050818103600083015261356681613043565b9050919050565b6000604082019050818103600083015261358681613043565b90506135956020830184612e57565b92915050565b600060208201905081810360008301526135b48161307a565b9050919050565b600060408201905081810360008301526135d48161307a565b905081810360208301526135e88184612e75565b905092915050565b60006020820190508181036000830152613609816130b1565b9050919050565b60006040820190508181036000830152613629816130b1565b90506136386020830184612e57565b92915050565b60006020820190508181036000830152613657816130e8565b9050919050565b60006040820190508181036000830152613677816130e8565b9050818103602083015261368b8184612e75565b905092915050565b600060208201905081810360008301526136ac8161311f565b9050919050565b600060408201905081810360008301526136cc8161311f565b905081810360208301526136e08184612e75565b905092915050565b6000604082019050818103600083015261370181613156565b905081810360208301526137158184612ee1565b905092915050565b600060208201905081810360008301526137368161318d565b9050919050565b600060408201905081810360008301526137568161318d565b90506137656020830184612e57565b92915050565b600060208201905061378060008301846131c4565b92915050565b6000604051905081810181811067ffffffffffffffff821117156137a957600080fd5b8060405250919050565b600067ffffffffffffffff8211156137ca57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b60008160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600060058210151561385a57fe5b819050919050565b6000819050919050565b6000819050919050565b60006138818261382c565b9050919050565b60006138938261382c565b9050919050565b60006138a58261382c565b9050919050565b60006138b78261382c565b9050919050565b6000819050919050565b6000819050919050565b60006138dd8261382c565b9050919050565b60006138ef8261382c565b9050919050565b60006139018261384c565b9050919050565b600061391382613862565b9050919050565b82818337600083830152505050565b60005b8381101561394757808201518184015260208101905061392c565b83811115613956576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a7230582021c0e11230879b3bb3b5e787f2f7a05a9a39b68b4adab0d3e2ffd98d93d504516c6578706572696d656e74616cf50037"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040526040805190810160405280600681526020017f706f735f696e00000000000000000000000000000000000000000000000000008152506003908051906020019062000051929190620001f5565b503480156200005f57600080fd5b5060405162003f6138038062003f61833981018060405262000085919081019062000344565b8033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600080819055508060029080519060200190620000e6929190620001f5565b5050620001028162000122640100000000026401000000009004565b80600390805190602001906200011a929190620001f5565b5050620005aa565b6200013b620001eb640100000000026401000000009004565b73ffffffffffffffffffffffffffffffffffffffff1663c92a7801826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401620001919190620004a5565b602060405180830381600087803b158015620001ac57600080fd5b505af1158015620001c1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620001e7919081019062000318565b5050565b6000611001905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200023857805160ff191683800117855562000269565b8280016001018555821562000269579182015b82811115620002685782518255916020019190600101906200024b565b5b5090506200027891906200027c565b5090565b620002a191905b808211156200029d57600081600090555060010162000283565b5090565b90565b6000620002b2825162000559565b905092915050565b600082601f8301121515620002ce57600080fd5b8151620002e5620002df8262000521565b620004f3565b915080825260208301602083018583830111156200030257600080fd5b6200030f83828462000563565b50505092915050565b6000602082840312156200032b57600080fd5b60006200033b84828501620002a4565b91505092915050565b6000602082840312156200035757600080fd5b600082015167ffffffffffffffff8111156200037257600080fd5b6200038084828501620002ba565b91505092915050565b600062000396826200054e565b808452620003ac81602086016020860162000563565b620003b78162000599565b602085010191505092915050565b6000600882527f7461626c655f69640000000000000000000000000000000000000000000000006020830152604082019050919050565b6000606582527f62657274685f69642c696e6465782c696e5f74696d652c696e5f74696d655f7460208301527f7970652c696e5f747970652c706c6174655f69642c7072657061795f6c656e2c60408301527f7072657061795f6d6f6e65792c76656869636c655f747970652c696e5f70696360608301527f5f68617368000000000000000000000000000000000000000000000000000000608083015260a082019050919050565b60006060820190508181036000830152620004c1818462000389565b90508181036020830152620004d681620003c5565b90508181036040830152620004eb81620003fc565b905092915050565b6000604051905081810181811067ffffffffffffffff821117156200051757600080fd5b8060405250919050565b600067ffffffffffffffff8211156200053957600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b6000819050919050565b60005b838110156200058357808201518184015260208101905062000566565b8381111562000593576000848401525b50505050565b6000601f19601f8301169050919050565b6139a780620005ba6000396000f300608060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631830a4fa14610088578063325ff724146100cd5780633aca9a2114610112578063b3433d301461014f578063c624d5341461017a578063d4c46ced146101a5578063e012fd72146101d0575b600080fd5b34801561009457600080fd5b506100af60048036036100aa9190810190612d84565b61020d565b6040516100c499989796959493929190613335565b60405180910390f35b3480156100d957600080fd5b506100f460048036036100ef9190810190612bf4565b610b04565b60405161010999989796959493929190613335565b60405180910390f35b34801561011e57600080fd5b5061013960048036036101349190810190612c76565b611377565b6040516101469190613210565b60405180910390f35b34801561015b57600080fd5b5061016461153f565b604051610171919061376b565b60405180910390f35b34801561018657600080fd5b5061018f611548565b60405161019c91906131d3565b60405180910390f35b3480156101b157600080fd5b506101ba611572565b6040516101c791906132b3565b60405180910390f35b3480156101dc57600080fd5b506101f760048036036101f29190810190612b91565b611614565b60405161020491906131ee565b60405180910390f35b6060600080600060606000806000606060008060008c108061023157506000548c10155b156102a4576000806000806000806020604051908101604052806000815250959493929190859550849450839350602060405190810160405280600081525092919082925081915080905060206040519081016040528060008152509a509a509a509a509a509a509a509a509a50610af5565b61034860038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561033d5780601f106103125761010080835404028352916020019161033d565b820191906000526020600020905b81548152906001019060200180831161032057829003601f168201915b50505050508d61196a565b915060008273ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156103b057600080fd5b505af11580156103c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103e89190810190612b68565b141561045c576000806000806000806020604051908101604052806000815250959493929190859550849450839350602060405190810160405280600081525092919082925081915080905060206040519081016040528060008152509a509a509a509a509a509a509a509a509a50610af5565b8173ffffffffffffffffffffffffffffffffffffffff16633dd2b61460006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016104b29190613298565b602060405180830381600087803b1580156104cc57600080fd5b505af11580156104e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105049190810190612b16565b90508073ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161055990613554565b600060405180830381600087803b15801561057357600080fd5b505af1158015610587573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506105b09190810190612c35565b8173ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610603906135a9565b602060405180830381600087803b15801561061d57600080fd5b505af1158015610631573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506106559190810190612b68565b8273ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016106a89061364c565b602060405180830381600087803b1580156106c257600080fd5b505af11580156106d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506106fa9190810190612b68565b8373ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161074d906134b8565b602060405180830381600087803b15801561076757600080fd5b505af115801561077b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061079f9190810190612b68565b8473ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016107f2906135f7565b600060405180830381600087803b15801561080c57600080fd5b505af1158015610820573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506108499190810190612c35565b8573ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161089c9061371d565b602060405180830381600087803b1580156108b657600080fd5b505af11580156108ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506108ee9190810190612b68565b8673ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610941906136cf565b602060405180830381600087803b15801561095b57600080fd5b505af115801561096f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506109939190810190612b68565b8773ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016109e690613506565b602060405180830381600087803b158015610a0057600080fd5b505af1158015610a14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a389190810190612b68565b8873ffffffffffffffffffffff","ffffffffffffffffff16639bca41e86040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610a8b90613407565b600060405180830381600087803b158015610aa557600080fd5b505af1158015610ab9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610ae29190810190612c35565b9a509a509a509a509a509a509a509a509a505b50509193959799909294969850565b60606000806000606060008060006060600080610bbb60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bb05780601f10610b8557610100808354040283529160200191610bb0565b820191906000526020600020905b815481529060010190602001808311610b9357829003601f168201915b50505050508d611b52565b915060008273ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610c2357600080fd5b505af1158015610c37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610c5b9190810190612b68565b1415610ccf576000806000806000806020604051908101604052806000815250959493929190859550849450839350602060405190810160405280600081525092919082925081915080905060206040519081016040528060008152509a509a509a509a509a509a509a509a509a50611368565b8173ffffffffffffffffffffffffffffffffffffffff16633dd2b61460006040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610d259190613298565b602060405180830381600087803b158015610d3f57600080fd5b505af1158015610d53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d779190810190612b16565b90508073ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610dcc90613554565b600060405180830381600087803b158015610de657600080fd5b505af1158015610dfa573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610e239190810190612c35565b8173ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610e76906135a9565b602060405180830381600087803b158015610e9057600080fd5b505af1158015610ea4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ec89190810190612b68565b8273ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610f1b9061364c565b602060405180830381600087803b158015610f3557600080fd5b505af1158015610f49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f6d9190810190612b68565b8373ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610fc0906134b8565b602060405180830381600087803b158015610fda57600080fd5b505af1158015610fee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110129190810190612b68565b8473ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611065906135f7565b600060405180830381600087803b15801561107f57600080fd5b505af1158015611093573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506110bc9190810190612c35565b8573ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161110f9061371d565b602060405180830381600087803b15801561112957600080fd5b505af115801561113d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111619190810190612b68565b8673ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016111b4906136cf565b602060405180830381600087803b1580156111ce57600080fd5b505af11580156111e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112069190810190612b68565b8773ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161125990613506565b602060405180830381600087803b15801561127357600080fd5b505af1158015611287573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112ab9190810190612b68565b8873ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016112fe90613407565b600060405180830381600087803b15801561131857600080fd5b505af115801561132c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506113559190810190612c35565b9a509a509a509a509a509a509a509a509a505b50509193959799909294969850565b60008061141e60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114135780601f106113e857610100808354040283529160200191611413565b820191906000526020600020905b8154815290600101906020018083116113f657829003601f168201915b50505050508c611b52565b90506000805414806114cb575060008173ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561149157600080fd5b505af11580156114a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114c99190810190612b68565b145b156114e8576114e18b8b8b8b8b8b8b8b8b611d3a565b9150611531565b7f9ce428db80850e033f4cc9e1ae53ad9e8b5c8ff6e7d2eb01616b851eb68bdd1b60048081111561151557fe5b33604051611524929190613246565b60405180910390a1600491505b509998505050505050505050565b60008054905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060028054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561160a5780601f106115df5761010080835404028352916020019161160a565b820191906000526020600020905b8154815290600101906020018083116115ed57829003601f168201915b5050505050905090565b606060008060606000806116fb60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116b75780601f1061168c576101008083540402835291602001916116b7565b820191906000526020600020905b81548152906001019060200180831161169a57829003601f168201915b50505050508b8b6040805190810160405280600781526020017f696e5f74696d65000000000000000000000000000000000000000000000000008152508c8c6125b3565b94508473ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561176157600080fd5b505af1158015611775573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506117999190810190612b68565b9350836040519080825280602002602001820160405280156117cf57816020015b60608152602001906001900390816117ba5790505b509250600091505b8382101561195a578473ffffffffffffffffffffffffffffffffffffffff16633dd2b614836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611834919061322b565b602060405180830381600087803b15801561184e57600080fd5b505af1158015611862573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118869190810190612b16565b90508073ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016118db90613554565b600060405180830381600087803b1580156118f557600080fd5b505af1158015611909573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506119329190810190612c35565b838381518110151561194057fe5b9060200190602002018190525081806001019250506117d7565b8295505050505050949350505050565b6000806000611978856128b8565b91508173ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156119de57600080fd5b505af11580156119f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611a169190810190612ac4565b90508073ffffffffffffffffffffffffffffffffffffffff1663d62b54b4856040518263ffffffff167c0100000000","","5b612a5183828461391a565b50505092915050565b600082601f8301121515612a6d57600080fd5b8151612a80612a7b826137b3565b613786565b91508082526020830160208301858383011115612a9c57600080fd5b612aa7838284613929565b50505092915050565b6000612abc82356138c8565b905092915050565b600060208284031215612ad657600080fd5b6000612ae48482850161298c565b91505092915050565b600060208284031215612aff57600080fd5b6000612b0d848285016129a0565b91505092915050565b600060208284031215612b2857600080fd5b6000612b36848285016129b4565b91505092915050565b600060208284031215612b5157600080fd5b6000612b5f848285016129c8565b91505092915050565b600060208284031215612b7a57600080fd5b6000612b88848285016129f0565b91505092915050565b60008060008060808587031215612ba757600080fd5b6000612bb5878288016129dc565b9450506020612bc6878288016129dc565b9350506040612bd7878288016129dc565b9250506060612be8878288016129dc565b91505092959194509250565b600060208284031215612c0657600080fd5b600082013567ffffffffffffffff811115612c2057600080fd5b612c2c84828501612a04565b91505092915050565b600060208284031215612c4757600080fd5b600082015167ffffffffffffffff811115612c6157600080fd5b612c6d84828501612a5a565b91505092915050565b60008060008060008060008060006101208a8c031215612c9557600080fd5b60008a013567ffffffffffffffff811115612caf57600080fd5b612cbb8c828d01612a04565b9950506020612ccc8c828d016129dc565b9850506040612cdd8c828d016129dc565b9750506060612cee8c828d016129dc565b96505060808a013567ffffffffffffffff811115612d0b57600080fd5b612d178c828d01612a04565b95505060a0612d288c828d016129dc565b94505060c0612d398c828d016129dc565b93505060e0612d4a8c828d016129dc565b9250506101008a013567ffffffffffffffff811115612d6857600080fd5b612d748c828d01612a04565b9150509295985092959850929598565b600060208284031215612d9657600080fd5b6000612da484828501612ab0565b91505092915050565b612db68161382c565b82525050565b6000612dc7826137fe565b80845260208401935083602082028501612de0856137df565b60005b84811015612e19578383038852612dfb838351612eab565b9250612e068261381f565b9150602088019750600181019050612de3565b508196508694505050505092915050565b612e33816138d2565b82525050565b612e42816138e4565b82525050565b612e51816138f6565b82525050565b612e6081613862565b82525050565b612e6f81613908565b82525050565b6000612e8082613814565b808452612e94816020860160208601613929565b612e9d8161395c565b602085010191505092915050565b6000612eb682613809565b808452612eca816020860160208601613929565b612ed38161395c565b602085010191505092915050565b600081546001811660008114612efe5760018114612f1e57612f5f565b607f600283041680865260ff198316602087015260408601935050612f5f565b60028204808652602086019550612f34856137ec565b60005b82811015612f5657815481890152600182019150602081019050612f37565b80880195505050505b505092915050565b6000600b82527f696e5f7069635f686173680000000000000000000000000000000000000000006020830152604082019050919050565b6000600582527f696e6465780000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600782527f696e5f74797065000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600c82527f76656869636c655f7479706500000000000000000000000000000000000000006020830152604082019050919050565b6000600882527f62657274685f69640000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600782527f696e5f74696d65000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600882527f706c6174655f69640000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600c82527f696e5f74696d655f7479706500000000000000000000000000000000000000006020830152604082019050919050565b6000600882527f7461626c655f69640000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600c82527f7072657061795f6d6f6e657900000000000000000000000000000000000000006020830152604082019050919050565b6000600a82527f7072657061795f6c656e000000000000000000000000000000000000000000006020830152604082019050919050565b6131cd8161386c565b82525050565b60006020820190506131e86000830184612dad565b92915050565b600060208201905081810360008301526132088184612dbc565b905092915050565b60006020820190506132256000830184612e48565b92915050565b60006020820190506132406000830184612e57565b92915050565b600060408201905061325b6000830185612e57565b6132686020830184612dad565b9392505050565b60006040820190506132846000830185612e57565b6132916020830184612e57565b9392505050565b60006020820190506132ad6000830184612e66565b92915050565b600060208201905081810360008301526132cd8184612e75565b905092915050565b600060408201905081810360008301526132ef8185612e75565b90506132fe6020830184612e2a565b9392505050565b6000604082019050818103600083015261331f8185612e75565b905061332e6020830184612e57565b9392505050565b6000610120820190508181036000830152613350818c612e75565b905061335f602083018b612e57565b61336c604083018a612e57565b6133796060830189612e57565b818103608083015261338b8188612e75565b905061339a60a0830187612e57565b6133a760c0830186612e57565b6133b460e0830185612e57565b8181036101008301526133c78184612e75565b90509a9950505050505050505050565b600060408201905081810360008301526133f18185612ee1565b90506134006020830184612e39565b9392505050565b6000602082019050818103600083015261342081612f67565b9050919050565b6000604082019050818103600083015261344081612f67565b905081810360208301526134548184612e75565b905092915050565b6000604082019050818103600083015261347581612f9e565b90506134846020830184612e57565b92915050565b600060408201905081810360008301526134a381612f9e565b90506134b260208301846131c4565b92915050565b600060208201905081810360008301526134d181612fd5565b9050919050565b600060408201905081810360008301526134f181612fd5565b90506135006020830184612e57565b92915050565b6000602082019050818103600083015261351f8161300c565b9050919050565b6000604082019050818103600083015261353f8161300c565b905061354e6020830184612e57565b92915050565b6000602082019050818103600083015261356d81613043565b9050919050565b6000604082019050818103600083015261358d81613043565b905081810360208301526135a18184612e75565b905092915050565b600060208201905081810360008301526135c28161307a565b9050919050565b600060408201905081810360008301526135e28161307a565b90506135f16020830184612e57565b92915050565b60006020820190508181036000830152613610816130b1565b9050919050565b60006040820190508181036000830152613630816130b1565b905081810360208301526136448184612e75565b905092915050565b60006020820190508181036000830152613665816130e8565b9050919050565b60006040820190508181036000830152613685816130e8565b90506136946020830184612e57565b92915050565b600060408201905081810360008301526136b38161311f565b905081810360208301526136c78184612ee1565b905092915050565b600060208201905081810360008301526136e881613156565b9050919050565b6000604082019050818103600083015261370881613156565b90506137176020830184612e57565b92915050565b600060208201905081810360008301526137368161318d565b9050919050565b600060408201905081810360008301526137568161318d565b90506137656020830184612e57565b92915050565b600060208201905061378060008301846131c4565b92915050565b6000604051905081810181811067ffffffffffffffff821117156137a957600080fd5b8060405250919050565b600067ffffffffffffffff8211156137ca57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b60008160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600060058210151561385a57fe5b819050919050565b6000819050919050565b6000819050919050565b60006138818261382c565b9050919050565b60006138938261382c565b9050919050565b60006138a58261382c565b9050919050565b60006138b78261382c565b9050919050565b6000819050919050565b6000819050919050565b60006138dd8261382c565b9050919050565b60006138ef8261382c565b9050919050565b60006139018261384c565b9050919050565b600061391382613862565b9050919050565b82818337600083830152505050565b60005b8381101561394757808201518184015260208101905061392c565b83811115613956576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820ba4526bd8e965777aeca5627a3d963efdeabc25b398da75ce7054f9ec2929d346c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"berthId\",\"type\":\"string\"},{\"name\":\"inTime\",\"type\":\"int256\"},{\"name\":\"inTimeType\",\"type\":\"int256\"},{\"name\":\"inType\",\"type\":\"int256\"},{\"name\":\"plateId\",\"type\":\"string\"},{\"name\":\"prepayLen\",\"type\":\"int256\"},{\"name\":\"prepayMoney\",\"type\":\"int256\"},{\"name\":\"vehicleType\",\"type\":\"int256\"},{\"name\":\"inPicHash\",\"type\":\"string\"}],\"name\":\"insertRecord\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mIndex\",\"type\":\"uint256\"}],\"name\":\"getByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLoc\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"offset\",\"type\":\"int256\"},{\"name\":\"size\",\"type\":\"int256\"},{\"name\":\"start\",\"type\":\"int256\"},{\"name\":\"end\",\"type\":\"int256\"}],\"name\":\"getRecord\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"berthId\",\"type\":\"string\"}],\"name\":\"getById\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"loc\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"InsertRecordEvent\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final String FUNC_INSERTRECORD = "insertRecord";

    public static final String FUNC_GETBYINDEX = "getByIndex";

    public static final String FUNC_GETINDEX = "getIndex";

    public static final String FUNC_GETLOC = "getLoc";

    public static final String FUNC_GETOWNER = "getOwner";

    public static final String FUNC_GETRECORD = "getRecord";

    public static final String FUNC_GETBYID = "getById";

    public static final Event INSERTRECORDEVENT_EVENT = new Event("InsertRecordEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Address>() {}));
    ;

    protected TstInV4(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt insertRecord(String berthId, BigInteger inTime, BigInteger inTimeType, BigInteger inType, String plateId, BigInteger prepayLen, BigInteger prepayMoney, BigInteger vehicleType, String inPicHash) {
        final Function function = new Function(
                FUNC_INSERTRECORD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(berthId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(inTime), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(inTimeType), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(inType), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(plateId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(prepayLen), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(prepayMoney), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(vehicleType), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(inPicHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void insertRecord(String berthId, BigInteger inTime, BigInteger inTimeType, BigInteger inType, String plateId, BigInteger prepayLen, BigInteger prepayMoney, BigInteger vehicleType, String inPicHash, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INSERTRECORD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(berthId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(inTime), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(inTimeType), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(inType), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(plateId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(prepayLen), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(prepayMoney), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(vehicleType), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(inPicHash)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInsertRecord(String berthId, BigInteger inTime, BigInteger inTimeType, BigInteger inType, String plateId, BigInteger prepayLen, BigInteger prepayMoney, BigInteger vehicleType, String inPicHash) {
        final Function function = new Function(
                FUNC_INSERTRECORD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(berthId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(inTime), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(inTimeType), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(inType), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(plateId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(prepayLen), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(prepayMoney), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(vehicleType), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(inPicHash)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple9<String, BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, String> getInsertRecordInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSERTRECORD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple9<String, BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue(), 
                (String) results.get(8).getValue()
                );
    }

    public Tuple1<BigInteger> getInsertRecordOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INSERTRECORD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt getByIndex(BigInteger mIndex) {
        final Function function = new Function(
                FUNC_GETBYINDEX, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(mIndex)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getByIndex(BigInteger mIndex, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETBYINDEX, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(mIndex)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetByIndex(BigInteger mIndex) {
        final Function function = new Function(
                FUNC_GETBYINDEX, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(mIndex)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getGetByIndexInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETBYINDEX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple9<String, BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, String> getGetByIndexOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETBYINDEX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple9<String, BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue(), 
                (String) results.get(8).getValue()
                );
    }

    public BigInteger getIndex() throws ContractException {
        final Function function = new Function(FUNC_GETINDEX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String getLoc() throws ContractException {
        final Function function = new Function(FUNC_GETLOC, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String getOwner() throws ContractException {
        final Function function = new Function(FUNC_GETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt getRecord(BigInteger offset, BigInteger size, BigInteger start, BigInteger end) {
        final Function function = new Function(
                FUNC_GETRECORD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(offset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(size), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(start), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(end)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getRecord(BigInteger offset, BigInteger size, BigInteger start, BigInteger end, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETRECORD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(offset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(size), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(start), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(end)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetRecord(BigInteger offset, BigInteger size, BigInteger start, BigInteger end) {
        final Function function = new Function(
                FUNC_GETRECORD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(offset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(size), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(start), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(end)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<BigInteger, BigInteger, BigInteger, BigInteger> getGetRecordInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETRECORD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue()
                );
    }

    public Tuple1<List<String>> getGetRecordOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETRECORD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<String>>(

                convertToNative((List<Utf8String>) results.get(0).getValue())
                );
    }

    public TransactionReceipt getById(String berthId) {
        final Function function = new Function(
                FUNC_GETBYID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(berthId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getById(String berthId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETBYID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(berthId)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetById(String berthId) {
        final Function function = new Function(
                FUNC_GETBYID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(berthId)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getGetByIdInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETBYID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple9<String, BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, String> getGetByIdOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETBYID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple9<String, BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue(), 
                (String) results.get(8).getValue()
                );
    }

    public List<InsertRecordEventEventResponse> getInsertRecordEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INSERTRECORDEVENT_EVENT, transactionReceipt);
        ArrayList<InsertRecordEventEventResponse> responses = new ArrayList<InsertRecordEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InsertRecordEventEventResponse typedResponse = new InsertRecordEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeInsertRecordEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTRECORDEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeInsertRecordEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTRECORDEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static TstInV4 load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new TstInV4(contractAddress, client, credential);
    }

    public static TstInV4 deploy(Client client, CryptoKeyPair credential, String loc) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(loc)));
        return deploy(TstInV4.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class InsertRecordEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret;

        public String account;
    }
}
