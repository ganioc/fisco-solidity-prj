package org.com.fisco;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class TstOut extends Contract {
    public static final String[] BINARY_ARRAY = {"","0100000000811115610c5d57600080fd5b82810190506020810184811115610c7357600080fd5b8151856001820283011164010000000082111715610c9057600080fd5b50509291905050508273ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260108152602001807f73686f756c645f7061795f6d6f6e657900000000000000000000000000000000815250602001915050602060405180830381600087803b158015610d3857600080fd5b505af1158015610d4c573d6000803e3d6000fd5b505050506040513d6020811015610d6257600080fd5b81019080805190602001909291905050508373ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260028152602001807f6964000000000000000000000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b158015610e1357600080fd5b505af1158015610e27573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015610e5157600080fd5b810190808051640100000000811115610e6957600080fd5b82810190506020810184811115610e7f57600080fd5b8151856001820283011164010000000082111715610e9c57600080fd5b50509291905050508473ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600c8152602001807f6f75745f7069635f686173680000000000000000000000000000000000000000815250602001915050600060405180830381600087803b158015610f4457600080fd5b505af1158015610f58573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015610f8257600080fd5b810190808051640100000000811115610f9a57600080fd5b82810190506020810184811115610fb057600080fd5b8151856001820283011164010000000082111715610fcd57600080fd5b5050929190505050965096509650965096505b505091939590929450565b6000806000610ff985611ba4565b91508173ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561105f57600080fd5b505af1158015611073573d6000803e3d6000fd5b505050506040513d602081101561108957600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663e8434e3985836040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561115757808201518184015260208101905061113c565b50505050905090810190601f1680156111845780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156111a457600080fd5b505af11580156111b8573d6000803e3d6000fd5b505050506040513d60208110156111ce57600080fd5b81019080805190602001909291905050509250505092915050565b600080600061129160038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112875780601f1061125c57610100808354040283529160200191611287565b820191906000526020600020905b81548152906001019060200180831161126a57829003601f168201915b5050505050611ba4565b91508173ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156112f757600080fd5b505af115801561130b573d6000803e3d6000fd5b505050506040513d602081101561132157600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663e942b516896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260088152602001807f62657274685f6964000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156113f45780820151818401526020810190506113d9565b50505050905090810190601f1680156114215780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561144157600080fd5b505af1158015611455573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe96000546040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260058152602001807f696e64657800000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b15801561150357600080fd5b505af1158015611517573d6000803e3d6000fd5b50505050611523611cc3565b8073ffffffffffffffffffffffffffffffffffffffff1663e942b516886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260088152602001807f6f75745f74696d65000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156115e35780820151818401526020810190506115c8565b50505050905090810190601f1680156116105780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561163057600080fd5b505af1158015611644573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632ef8ba74876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260108152602001807f73686f756c645f7061795f6d6f6e65790000000000000000000000000000000081525060200192505050600060405180830381600087803b1580156116f057600080fd5b505af1158015611704573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663e942b516866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260028152602001807f6964000000000000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156117c85780820151818401526020810190506117ad565b50505050905090810190601f1680156117f55780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561181557600080fd5b505af1158015611829573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663e942b516856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018381038352600c8152602001807f6f75745f7069635f686173680000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156118ed5780820151818401526020810190506118d2565b50505050905090810190601f16801561191a5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561193a57600080fd5b505af115801561194e573d6000803e3d6000fd5b5050505060018273ffffffffffffffffffffffffffffffffffffffff166331afac368a846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015611a0f5780820151818401526020810190506119f4565b50505050905090810190601f168015611a3c5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015611a5c57600080fd5b505af1158015611a70573d6000803e3d6000fd5b505050506040513d6020811015611a8657600080fd5b81019080805190602001909291905050501415611b1d577f3a66b6d5d90e100fca6d190a0e685c087e9c8e3981966428c8cf5b9512ebd9b860006004811115611acb57fe5b33604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a160009250611b99565b7f3a66b6d5d90e100fca6d190a0e685c087e9c8e3981966428c8cf5b9512ebd9b860016004811115611b4b57fe5b33604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1600192505b505095945050505050565b6000611bae611cd6565b73ffffffffffffffffffffffffffffffffffffffff1663f23f63c9836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611c35578082015181840152602081019050611c1a565b50505050905090810190601f168015611c625780820380","516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b158015611c8157600080fd5b505af1158015611c95573d6000803e3d6000fd5b505050506040513d6020811015611cab57600080fd5b81019080805190602001909291905050509050919050565b6000808154809291906001019190505550565b60006110019050905600a165627a7a7230582050c5adc1b2b77167388bb5310800e2e58d4724f6e00933104065d2b4ecb1a1660029"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","405180830381600087803b158015610c6357600080fd5b505af1158015610c77573d6000803e3d6000fd5b505050506040513d6020811015610c8d57600080fd5b81019080805190602001909291905050508373ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260028152602001807f6964000000000000000000000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b158015610d3e57600080fd5b505af1158015610d52573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015610d7c57600080fd5b810190808051640100000000811115610d9457600080fd5b82810190506020810184811115610daa57600080fd5b8151856001820283011164010000000082111715610dc757600080fd5b50509291905050508473ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600c8152602001807f6f75745f7069635f686173680000000000000000000000000000000000000000815250602001915050600060405180830381600087803b158015610e6f57600080fd5b505af1158015610e83573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015610ead57600080fd5b810190808051640100000000811115610ec557600080fd5b82810190506020810184811115610edb57600080fd5b8151856001820283011164010000000082111715610ef857600080fd5b5050929190505050965096509650965096505b505091939590929450565b60008054905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fe15780601f10610fb657610100808354040283529160200191610fe1565b820191906000526020600020905b815481529060010190602001808311610fc457829003601f168201915b5050505050905090565b6000806000610ff985611ba4565b91508173ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561105f57600080fd5b505af1158015611073573d6000803e3d6000fd5b505050506040513d602081101561108957600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663d8ac595785836040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561115757808201518184015260208101905061113c565b50505050905090810190601f1680156111845780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156111a457600080fd5b505af11580156111b8573d6000803e3d6000fd5b505050506040513d60208110156111ce57600080fd5b81019080805190602001909291905050509250505092915050565b600080600061129160038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112875780601f1061125c57610100808354040283529160200191611287565b820191906000526020600020905b81548152906001019060200180831161126a57829003601f168201915b5050505050611ba4565b91508173ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156112f757600080fd5b505af115801561130b573d6000803e3d6000fd5b505050506040513d602081101561132157600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff16631a391cb4896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260088152602001807f62657274685f6964000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156113f45780820151818401526020810190506113d9565b50505050905090810190601f1680156114215780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561144157600080fd5b505af1158015611455573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663f2f4ee6d6000546040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260058152602001807f696e64657800000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b15801561150357600080fd5b505af1158015611517573d6000803e3d6000fd5b50505050611523611cc3565b8073ffffffffffffffffffffffffffffffffffffffff16631a391cb4886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260088152602001807f6f75745f74696d65000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156115e35780820151818401526020810190506115c8565b50505050905090810190601f1680156116105780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561163057600080fd5b505af1158015611644573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663def42698876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260108152602001807f73686f756c645f7061795f6d6f6e65790000000000000000000000000000000081525060200192505050600060405180830381600087803b1580156116f057600080fd5b505af1158015611704573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16631a391cb4866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260028152602001807f6964000000000000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156117c85780820151818401526020810190506117ad565b50505050905090810190601f1680156117f55780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561181557600080fd5b505af1158015611829573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16631a391cb4856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018381038352600c8152602001807f6f75745f7069635f686173680000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156118ed5780820151818401526020810190506118d2565b50505050905090810190601f16801561191a5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561193a57600080fd5b505af115801561194e573d6000803e3d6000fd5b5050505060018273ffffffffffffffffffffffffffffffffffffffff16634c6f30c08a846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015611a0f5780820151818401526020810190506119f4565b50505050905090810190601f168015611a3c5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015611a5c57600080fd5b505af1158015611a70573d6000803e3d6000fd5b505050506040513d6020811015611a8657600080fd5b81019080805190602001909291905050501415611b1d577f9ce428db80850e033f4cc9e1ae53ad9e8b5c8ff6e7d2eb01616b851eb68bdd1b60006004811115611acb57fe5b33604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a160009250611b99565b7f9ce428db80850e033f4cc9e1ae53ad9e8b5c8ff6e7d2eb01616b851eb68bdd1b60016004811115611b4b57fe5b33604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1600192505b505095945050505050565b6000611bae611cd6565b73ffffffffffffffffffffffffffffffffffffffff166359a48b65836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611c35578082015181840152602081019050611c1a565b50505050905090810190601f168015611c625780820380","516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b158015611c8157600080fd5b505af1158015611c95573d6000803e3d6000fd5b505050506040513d6020811015611cab57600080fd5b81019080805190602001909291905050509050919050565b6000808154809291906001019190505550565b60006110019050905600a165627a7a723058208713a0e4235a5089b5b8d16ab76aea340d5d7f0d4ceb46aed87d420321968ca70029"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[],\"name\":\"getIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLoc\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"berthId\",\"type\":\"string\"},{\"name\":\"outTime\",\"type\":\"string\"},{\"name\":\"shouldPayMoney\",\"type\":\"int256\"},{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"outPicHash\",\"type\":\"string\"}],\"name\":\"insertRecord\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"berthId\",\"type\":\"string\"}],\"name\":\"getById\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"loc\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"InsertRecordEvent\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final String FUNC_GETINDEX = "getIndex";

    public static final String FUNC_GETLOC = "getLoc";

    public static final String FUNC_GETOWNER = "getOwner";

    public static final String FUNC_INSERTRECORD = "insertRecord";

    public static final String FUNC_GETBYID = "getById";

    public static final Event INSERTRECORDEVENT_EVENT = new Event("InsertRecordEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Address>() {}));
    ;

    protected TstOut(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public BigInteger getIndex() throws ContractException {
        final Function function = new Function(FUNC_GETINDEX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String getLoc() throws ContractException {
        final Function function = new Function(FUNC_GETLOC, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String getOwner() throws ContractException {
        final Function function = new Function(FUNC_GETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt insertRecord(String berthId, String outTime, BigInteger shouldPayMoney, String id, String outPicHash) {
        final Function function = new Function(
                FUNC_INSERTRECORD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(berthId), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(outTime), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(shouldPayMoney), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(outPicHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void insertRecord(String berthId, String outTime, BigInteger shouldPayMoney, String id, String outPicHash, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INSERTRECORD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(berthId), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(outTime), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(shouldPayMoney), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(outPicHash)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInsertRecord(String berthId, String outTime, BigInteger shouldPayMoney, String id, String outPicHash) {
        final Function function = new Function(
                FUNC_INSERTRECORD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(berthId), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(outTime), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(shouldPayMoney), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(outPicHash)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, BigInteger, String, String> getInsertRecordInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSERTRECORD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, BigInteger, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue()
                );
    }

    public Tuple1<BigInteger> getInsertRecordOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INSERTRECORD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt getById(String berthId) {
        final Function function = new Function(
                FUNC_GETBYID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(berthId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getById(String berthId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETBYID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(berthId)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetById(String berthId) {
        final Function function = new Function(
                FUNC_GETBYID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(berthId)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getGetByIdInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETBYID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple5<String, String, BigInteger, String, String> getGetByIdOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETBYID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, BigInteger, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue()
                );
    }

    public List<InsertRecordEventEventResponse> getInsertRecordEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INSERTRECORDEVENT_EVENT, transactionReceipt);
        ArrayList<InsertRecordEventEventResponse> responses = new ArrayList<InsertRecordEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InsertRecordEventEventResponse typedResponse = new InsertRecordEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeInsertRecordEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTRECORDEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeInsertRecordEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTRECORDEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static TstOut load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new TstOut(contractAddress, client, credential);
    }

    public static TstOut deploy(Client client, CryptoKeyPair credential, String loc) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(loc)));
        return deploy(TstOut.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class InsertRecordEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret;

        public String account;
    }
}
