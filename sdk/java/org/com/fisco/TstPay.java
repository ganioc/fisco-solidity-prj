package org.com.fisco;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple8;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class TstPay extends Contract {
    public static final String[] BINARY_ARRAY = {"","15610c0a57600080fd5b81019080805190602001909291905050508373ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260188152602001807f7061726b696e675f61637475616c5f7061795f6d6f6e65790000000000000000815250602001915050602060405180830381600087803b158015610cbb57600080fd5b505af1158015610ccf573d6000803e3d6000fd5b505050506040513d6020811015610ce557600080fd5b81019080805190602001909291905050508473ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260118152602001807f7061726b696e675f7265636f72645f6964000000000000000000000000000000815250602001915050600060405180830381600087803b158015610d9657600080fd5b505af1158015610daa573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015610dd457600080fd5b810190808051640100000000811115610dec57600080fd5b82810190506020810184811115610e0257600080fd5b8151856001820283011164010000000082111715610e1f57600080fd5b50509291905050508573ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600a8152602001807f7072657061795f6c656e00000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015610ec757600080fd5b505af1158015610edb573d6000803e3d6000fd5b505050506040513d6020811015610ef157600080fd5b81019080805190602001909291905050508673ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260118152602001807f73686f756c645f7061795f616d6f756e74000000000000000000000000000000815250602001915050602060405180830381600087803b158015610fa257600080fd5b505af1158015610fb6573d6000803e3d6000fd5b505050506040513d6020811015610fcc57600080fd5b81019080805190602001909291905050508773ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260088152602001807f7a65726f5f6f7765000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561107d57600080fd5b505af1158015611091573d6000803e3d6000fd5b505050506040513d60208110156110a757600080fd5b8101908080519060200190929190505050995099509950995099509950995099505b5050919395975091939597565b60008060006110e485611e08565b91508173ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561114a57600080fd5b505af115801561115e573d6000803e3d6000fd5b505050506040513d602081101561117457600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663e8434e3985836040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015611242578082015181840152602081019050611227565b50505050905090810190601f16801561126f5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561128f57600080fd5b505af11580156112a3573d6000803e3d6000fd5b505050506040513d60208110156112b957600080fd5b81019080805190602001909291905050509250505092915050565b600080600061137c60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113725780601f1061134757610100808354040283529160200191611372565b820191906000526020600020905b81548152906001019060200180831161135557829003601f168201915b5050505050611e08565b91508173ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156113e257600080fd5b505af11580156113f6573d6000803e3d6000fd5b505050506040513d602081101561140c57600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663e942b5168c6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260088152602001807f62657274685f6964000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156114df5780820151818401526020810190506114c4565b50505050905090810190601f16801561150c5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561152c57600080fd5b505af1158015611540573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe96000546040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260058152602001807f696e64657800000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b1580156115ee57600080fd5b505af1158015611602573d6000803e3d6000fd5b5050505061160e611f27565b8073ffffffffffffffffffffffffffffffffffffffff16632ef8ba748b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260068152602001807f616d6f756e74000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b1580156116b657600080fd5b505af11580156116ca573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632ef8ba748a6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260048152602001807f6d6f64650000000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b15801561177657600080fd5b505af115801561178a573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632ef8ba74896040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260188152602001807f7061726b696e675f61637475616c5f7061795f6d6f6e6579000000000000000081525060200192505050600060405180830381600087803b15801561183657600080fd5b505af115801561184a573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663e942b516886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260118152602001807f7061726b696e675f7265636f72645f6964000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b8381101561190e5780820151818401526020810190506118f3565b50505050905090810190601f16801561193b5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561195b57600080fd5b505af115801561196f573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632ef8ba74876040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018381526020018281038252600a8152602001807f7072657061795f6c656e0000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b158015611a1b57600080fd5b505af1158015611a2f573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632ef8ba74866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260118152602001807f73686f756c645f7061795f616d6f756e7400000000000000000000000000000081525060200192505050600060405180830381600087803b158015611adb57600080fd5b505af1158015611aef573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632ef8ba74856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260088152602001807f7a65726f5f6f776500000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b158015611b9b57600080fd5b505af1158015611baf573d6000803e3d6000fd5b5050505060018273ffffffffffffffffffffffffffffffffffffffff166331afac368d846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004","0180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015611c70578082015181840152602081019050611c55565b50505050905090810190601f168015611c9d5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015611cbd57600080fd5b505af1158015611cd1573d6000803e3d6000fd5b505050506040513d6020811015611ce757600080fd5b81019080805190602001909291905050501415611d7e577f3a66b6d5d90e100fca6d190a0e685c087e9c8e3981966428c8cf5b9512ebd9b860006004811115611d2c57fe5b33604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a160009250611dfa565b7f3a66b6d5d90e100fca6d190a0e685c087e9c8e3981966428c8cf5b9512ebd9b860016004811115611dac57fe5b33604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1600192505b505098975050505050505050565b6000611e12611f3a565b73ffffffffffffffffffffffffffffffffffffffff1663f23f63c9836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611e99578082015181840152602081019050611e7e565b50505050905090810190601f168015611ec65780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b158015611ee557600080fd5b505af1158015611ef9573d6000803e3d6000fd5b505050506040513d6020811015611f0f57600080fd5b81019080805190602001909291905050509050919050565b6000808154809291906001019190505550565b60006110019050905600a165627a7a723058206a8bd19e9ad16e0b1ddb2923bf54565bcc43ea4e36e79849b13131d002e144530029"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040526040805190810160405280600781526020017f706f735f70617900000000000000000000000000000000000000000000000000815250600390805190602001906200005192919062000340565b503480156200005f57600080fd5b506040516200236f3803806200236f833981018060405281019080805182019291905050508033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600080819055508060029080519060200190620000e592919062000340565b5050620001018162000121640100000000026401000000009004565b80600390805190602001906200011992919062000340565b5050620003ef565b6200013a62000336640100000000026401000000009004565b73ffffffffffffffffffffffffffffffffffffffff1663c92a7801826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018060200180602001848103845285818151815260200191508051906020019080838360005b83811015620001cb578082015181840152602081019050620001ae565b50505050905090810190601f168015620001f95780820380516001836020036101000a031916815260200191505b50848103835260088152602001807f62657274685f6964000000000000000000000000000000000000000000000000815250602001848103825260628152602001807f696e6465782c616d6f756e742c6d6f64652c7061726b696e675f61637475616c81526020017f5f7061795f6d6f6e65792c7061726b696e675f7265636f72645f69642c70726581526020017f7061795f6c656e2c73686f756c645f7061795f616d6f756e742c7a65726f5f6f81526020017f7765000000000000000000000000000000000000000000000000000000000000815250608001945050505050602060405180830381600087803b158015620002f557600080fd5b505af11580156200030a573d6000803e3d6000fd5b505050506040513d60208110156200032157600080fd5b81019080805190602001909291905050505050565b6000611001905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200038357805160ff1916838001178555620003b4565b82800160010185558215620003b4579182015b82811115620003b357825182559160200191906001019062000396565b5b509050620003c39190620003c7565b5090565b620003ec91905b80821115620003e8576000816000905550600101620003ce565b5090565b90565b611f7080620003ff6000396000f30060806040526004361061006d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063325ff724146100725780636e9d1e7c146101ea578063b3433d30146102f7578063c624d53414610322578063d4c46ced14610379575b600080fd5b34801561007e57600080fd5b506100d9600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610409565b60405180806020018981526020018881526020018781526020018060200186815260200185815260200184815260200183810383528b818151815260200191508051906020019080838360005b83811015610141578082015181840152602081019050610126565b50505050905090810190601f16801561016e5780820380516001836020036101000a031916815260200191505b50838103825287818151815260200191508051906020019080838360005b838110156101a757808201518184015260208101905061018c565b50505050905090810190601f1680156101d45780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b3480156101f657600080fd5b506102d3600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001909291908035906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001909291908035906020019092919080359060200190929190505050610e11565b604051808260048111156102e357fe5b60ff16815260200191505060405180910390f35b34801561030357600080fd5b5061030c611001565b6040518082815260200191505060405180910390f35b34801561032e57600080fd5b5061033761100a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561038557600080fd5b5061038e611034565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103ce5780820151818401526020810190506103b3565b50505050905090810190601f1680156103fb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60606000806000606060008060008060006104be60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104b35780601f10610488576101008083540402835291602001916104b3565b820191906000526020600020905b81548152906001019060200180831161049657829003601f168201915b50505050508c6110d6565b915060008273ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561052657600080fd5b505af115801561053a573d6000803e3d6000fd5b505050506040513d602081101561055057600080fd5b810190808051906020019092919050505014156105c2576000806000806000806020604051908101604052806000815250959493929190859550849450839350602060405190810160405280600081525092919082925081915080905099509950995099509950995099509950610e04565b8173ffffffffffffffffffffffffffffffffffffffff16633dd2b61460006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561063257600080fd5b505af1158015610646573d6000803e3d6000fd5b505050506040513d602081101561065c57600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260088152602001807f62657274685f6964000000000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b15801561070f57600080fd5b505af1158015610723573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561074d57600080fd5b81019080805164010000000081111561076557600080fd5b8281019050602081018481111561077b57600080fd5b815185600182028301116401000000008211171561079857600080fd5b50509291905050508173ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260068152602001807f616d6f756e740000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561084057600080fd5b505af1158015610854573d6000803e3d6000fd5b505050506040513d602081101561086a57600080fd5b81019080805190602001909291905050508273ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260048152602001807f6d6f646500000000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561091b57600080fd5b505af115801561092f573d6000803e3d6000fd5b505050506040513d602081101561094557600080fd5b81019080805190602001909291905050508373ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260188152602001807f7061726b696e675f61637475616c5f7061795f6d6f6e65790000000000000000815250602001915050602060405180830381600087803b1580156109f657600080fd5b505af1158015610a0a573d6000803e3d6000fd5b505050506040513d6020811015610a2057600080fd5b81019080805190602001909291905050508473ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260118152602001807f7061726b696e675f7265636f72645f6964000000000000000000000000000000815250602001915050600060405180830381600087803b158015610ad157600080fd5b505af1158015610ae5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015610b0f57600080fd5b810190808051640100000000811115610b2757600080fd5b82810190506020810184811115610b3d57600080fd5b8151856001820283011164010000000082111715610b5a57600080fd5b50509291905050508573ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600a8152602001807f7072657061795f6c656e00000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015610c0257600080","fd5b505af1158015610c16573d6000803e3d6000fd5b505050506040513d6020811015610c2c57600080fd5b81019080805190602001909291905050508673ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260118152602001807f73686f756c645f7061795f616d6f756e74000000000000000000000000000000815250602001915050602060405180830381600087803b158015610cdd57600080fd5b505af1158015610cf1573d6000803e3d6000fd5b505050506040513d6020811015610d0757600080fd5b81019080805190602001909291905050508773ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260088152602001807f7a65726f5f6f7765000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015610db857600080fd5b505af1158015610dcc573d6000803e3d6000fd5b505050506040513d6020811015610de257600080fd5b8101908080519060200190929190505050995099509950995099509950995099505b5050919395975091939597565b600080610eb860038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ead5780601f10610e8257610100808354040283529160200191610ead565b820191906000526020600020905b815481529060010190602001808311610e9057829003601f168201915b50505050508b6110d6565b905060008173ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610f2057600080fd5b505af1158015610f34573d6000803e3d6000fd5b505050506040513d6020811015610f4a57600080fd5b8101908080519060200190929190505050141515610fe1577f9ce428db80850e033f4cc9e1ae53ad9e8b5c8ff6e7d2eb01616b851eb68bdd1b600480811115610f8f57fe5b33604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a160049150610ff4565b610ff18a8a8a8a8a8a8a8a6112d4565b91505b5098975050505050505050565b60008054905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110cc5780601f106110a1576101008083540402835291602001916110cc565b820191906000526020600020905b8154815290600101906020018083116110af57829003601f168201915b5050505050905090565b60008060006110e485611e08565b91508173ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561114a57600080fd5b505af115801561115e573d6000803e3d6000fd5b505050506040513d602081101561117457600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663d8ac595785836040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015611242578082015181840152602081019050611227565b50505050905090810190601f16801561126f5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561128f57600080fd5b505af11580156112a3573d6000803e3d6000fd5b505050506040513d60208110156112b957600080fd5b81019080805190602001909291905050509250505092915050565b600080600061137c60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113725780601f1061134757610100808354040283529160200191611372565b820191906000526020600020905b81548152906001019060200180831161135557829003601f168201915b5050505050611e08565b91508173ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156113e257600080fd5b505af11580156113f6573d6000803e3d6000fd5b505050506040513d602081101561140c57600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff16631a391cb48c6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260088152602001807f62657274685f6964000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156114df5780820151818401526020810190506114c4565b50505050905090810190601f16801561150c5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561152c57600080fd5b505af1158015611540573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663f2f4ee6d6000546040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260058152602001807f696e64657800000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b1580156115ee57600080fd5b505af1158015611602573d6000803e3d6000fd5b5050505061160e611f27565b8073ffffffffffffffffffffffffffffffffffffffff1663def426988b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260068152602001807f616d6f756e74000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b1580156116b657600080fd5b505af11580156116ca573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663def426988a6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260048152602001807f6d6f64650000000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b15801561177657600080fd5b505af115801561178a573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663def42698896040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260188152602001807f7061726b696e675f61637475616c5f7061795f6d6f6e6579000000000000000081525060200192505050600060405180830381600087803b15801561183657600080fd5b505af115801561184a573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16631a391cb4886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260118152602001807f7061726b696e675f7265636f72645f6964000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b8381101561190e5780820151818401526020810190506118f3565b50505050905090810190601f16801561193b5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561195b57600080fd5b505af115801561196f573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663def42698876040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018381526020018281038252600a8152602001807f7072657061795f6c656e0000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b158015611a1b57600080fd5b505af1158015611a2f573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663def42698866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260118152602001807f73686f756c645f7061795f616d6f756e7400000000000000000000000000000081525060200192505050600060405180830381600087803b158015611adb57600080fd5b505af1158015611aef573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663def42698856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260088152602001807f7a65726f5f6f776500000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b158015611b9b57600080fd5b505af1158015611baf573d6000803e3d6000fd5b5050505060018273ffffffffffffffffffffffffffffffffffffffff16634c6f30c08d846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004","0180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015611c70578082015181840152602081019050611c55565b50505050905090810190601f168015611c9d5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015611cbd57600080fd5b505af1158015611cd1573d6000803e3d6000fd5b505050506040513d6020811015611ce757600080fd5b81019080805190602001909291905050501415611d7e577f9ce428db80850e033f4cc9e1ae53ad9e8b5c8ff6e7d2eb01616b851eb68bdd1b60006004811115611d2c57fe5b33604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a160009250611dfa565b7f9ce428db80850e033f4cc9e1ae53ad9e8b5c8ff6e7d2eb01616b851eb68bdd1b60016004811115611dac57fe5b33604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1600192505b505098975050505050505050565b6000611e12611f3a565b73ffffffffffffffffffffffffffffffffffffffff166359a48b65836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611e99578082015181840152602081019050611e7e565b50505050905090810190601f168015611ec65780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b158015611ee557600080fd5b505af1158015611ef9573d6000803e3d6000fd5b505050506040513d6020811015611f0f57600080fd5b81019080805190602001909291905050509050919050565b6000808154809291906001019190505550565b60006110019050905600a165627a7a72305820dce291e4070e599767b9fdf720562930ee1b8f29e9203cd7fd514e7f130585420029"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[],\"name\":\"getIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLoc\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"berthId\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"int256\"},{\"name\":\"mode\",\"type\":\"int256\"},{\"name\":\"parkingActualPayMoney\",\"type\":\"int256\"},{\"name\":\"parkingRecordId\",\"type\":\"string\"},{\"name\":\"prepayLen\",\"type\":\"int256\"},{\"name\":\"shouldPayAmount\",\"type\":\"int256\"},{\"name\":\"zeroOwe\",\"type\":\"int256\"}],\"name\":\"insertRecord\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"berthId\",\"type\":\"string\"}],\"name\":\"getById\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"loc\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"InsertRecordEvent\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final String FUNC_GETINDEX = "getIndex";

    public static final String FUNC_GETLOC = "getLoc";

    public static final String FUNC_GETOWNER = "getOwner";

    public static final String FUNC_INSERTRECORD = "insertRecord";

    public static final String FUNC_GETBYID = "getById";

    public static final Event INSERTRECORDEVENT_EVENT = new Event("InsertRecordEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Address>() {}));
    ;

    protected TstPay(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public BigInteger getIndex() throws ContractException {
        final Function function = new Function(FUNC_GETINDEX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String getLoc() throws ContractException {
        final Function function = new Function(FUNC_GETLOC, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String getOwner() throws ContractException {
        final Function function = new Function(FUNC_GETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt insertRecord(String berthId, BigInteger amount, BigInteger mode, BigInteger parkingActualPayMoney, String parkingRecordId, BigInteger prepayLen, BigInteger shouldPayAmount, BigInteger zeroOwe) {
        final Function function = new Function(
                FUNC_INSERTRECORD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(berthId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(amount), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(mode), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(parkingActualPayMoney), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(parkingRecordId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(prepayLen), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(shouldPayAmount), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(zeroOwe)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void insertRecord(String berthId, BigInteger amount, BigInteger mode, BigInteger parkingActualPayMoney, String parkingRecordId, BigInteger prepayLen, BigInteger shouldPayAmount, BigInteger zeroOwe, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INSERTRECORD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(berthId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(amount), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(mode), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(parkingActualPayMoney), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(parkingRecordId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(prepayLen), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(shouldPayAmount), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(zeroOwe)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInsertRecord(String berthId, BigInteger amount, BigInteger mode, BigInteger parkingActualPayMoney, String parkingRecordId, BigInteger prepayLen, BigInteger shouldPayAmount, BigInteger zeroOwe) {
        final Function function = new Function(
                FUNC_INSERTRECORD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(berthId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(amount), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(mode), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(parkingActualPayMoney), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(parkingRecordId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(prepayLen), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(shouldPayAmount), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(zeroOwe)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple8<String, BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger> getInsertRecordInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSERTRECORD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple8<String, BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue()
                );
    }

    public Tuple1<BigInteger> getInsertRecordOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INSERTRECORD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt getById(String berthId) {
        final Function function = new Function(
                FUNC_GETBYID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(berthId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getById(String berthId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETBYID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(berthId)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetById(String berthId) {
        final Function function = new Function(
                FUNC_GETBYID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(berthId)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getGetByIdInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETBYID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple8<String, BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger> getGetByIdOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETBYID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple8<String, BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue()
                );
    }

    public List<InsertRecordEventEventResponse> getInsertRecordEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INSERTRECORDEVENT_EVENT, transactionReceipt);
        ArrayList<InsertRecordEventEventResponse> responses = new ArrayList<InsertRecordEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InsertRecordEventEventResponse typedResponse = new InsertRecordEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeInsertRecordEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTRECORDEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeInsertRecordEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTRECORDEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static TstPay load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new TstPay(contractAddress, client, credential);
    }

    public static TstPay deploy(Client client, CryptoKeyPair credential, String loc) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(loc)));
        return deploy(TstPay.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class InsertRecordEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret;

        public String account;
    }
}
